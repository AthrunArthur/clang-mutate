# -*- org -*-
#+Options: ^:nil

* Clang LibTooling interface
The llvm IRC room suggests using a "tooling interface".
http://clang.llvm.org/docs/LibTooling.html

The tooling interface will run a "front end action".
http://clang.llvm.org/docs/RAVFrontendAction.html

Clang tools depend on the existence of Compilation Databases.
http://clang.llvm.org/docs/JSONCompilationDatabase.html

* Notes Issues and Tasks [3/5]
** TODO better selection of AST nodes to visit [1/3]
- what can we visit http://clang.llvm.org/docs/RAVFrontendAction.html
- lets not visit tiny statements

*** TODO Different AST visitor functions
| VisitStmt             | a statement       |
| VisitDecl             |                   |
| VisitType             |                   |
| VisitUnary            | a unary operator  |
| VisitBin              | a binary operator |
| VisitTypeLoc          |                   |
| VisitUnqualTypeLoc    |                   |
| VisitQualifiedTypeLoc |                   |

for now lets just visit Stmts Decls and Types and see if that is
enough.

*** DONE Avoid tiny statements
All these types of statements [[file:/usr/local/src/llvm/tools/clang/tools/libclang/CXCursor.cpp::switch%20(S->getStmtClass())%20{][switch (S->getStmtClass())]].

#+begin_example
NoStmt
CaseStmt
DefaultStmt
IfStmt
SwitchStmt
WhileStmt
DoStmt
ForStmt
GotoStmt
IndirectGotoStmt
ContinueStmt
BreakStmt
ReturnStmt
GCCAsmStmt
MSAsmStmt
ObjCAtTryStmt
ObjCAtCatchStmt
ObjCAtFinallyStmt
ObjCAtThrowStmt
ObjCAtSynchronizedStmt
ObjCAutoreleasePoolStmt
ObjCForCollectionStmt
CXXCatchStmt
CXXTryStmt
CXXForRangeStmt
SEHTryStmt
SEHExceptStmt
SEHFinallyStmt
ArrayTypeTraitExpr
AsTypeExpr
AtomicExpr
BinaryConditionalOperator
BinaryTypeTraitExpr
TypeTraitExpr
CXXBindTemporaryExpr
CXXDefaultArgExpr
CXXScalarValueInitExpr
CXXUuidofExpr
ChooseExpr
DesignatedInitExpr
ExprWithCleanups
ExpressionTraitExpr
ExtVectorElementExpr
ImplicitCastExpr
ImplicitValueInitExpr
MaterializeTemporaryExpr
ObjCIndirectCopyRestoreExpr
OffsetOfExpr
ParenListExpr
PredefinedExpr
ShuffleVectorExpr
UnaryExprOrTypeTraitExpr
UnaryTypeTraitExpr
VAArgExpr
ObjCArrayLiteral
ObjCDictionaryLiteral
ObjCBoxedExpr
ObjCSubscriptRefExpr
OpaqueValueExpr
PseudoObjectExpr
CompoundStmt
NullStmt
LabelStmt
AttributedStmt
DeclStmt
IntegerLiteral
FloatingLiteral
ImaginaryLiteral
StringLiteral
CharacterLiteral
ParenExpr
UnaryOperator
CXXNoexceptExpr
ArraySubscriptExpr
BinaryOperator
CompoundAssignOperator
ConditionalOperator
CStyleCastExpr
CompoundLiteralExpr
InitListExpr
AddrLabelExpr
StmtExpr
GenericSelectionExpr
GNUNullExpr
CXXStaticCastExpr
CXXDynamicCastExpr
CXXReinterpretCastExpr
CXXConstCastExpr
CXXFunctionalCastExpr
CXXTypeidExpr
CXXBoolLiteralExpr
CXXNullPtrLiteralExpr
CXXThisExpr
CXXThrowExpr
CXXNewExpr
CXXDeleteExpr
ObjCStringLiteral
ObjCEncodeExpr
ObjCSelectorExpr
ObjCProtocolExpr
ObjCBoolLiteralExpr
ObjCBridgedCastExpr
BlockExpr
PackExpansionExpr
SizeOfPackExpr
DeclRefExpr
DependentScopeDeclRefExpr
SubstNonTypeTemplateParmExpr
SubstNonTypeTemplateParmPackExpr
UnresolvedLookupExpr
CXXDependentScopeMemberExpr
CXXPseudoDestructorExpr
MemberExpr
ObjCIsaExpr
ObjCIvarRefExpr
ObjCPropertyRefExpr
UnresolvedMemberExpr
CallExpr
CXXOperatorCallExpr
CXXMemberCallExpr
CUDAKernelCallExpr
CXXConstructExpr
CXXTemporaryObjectExpr
CXXUnresolvedConstructExpr
UserDefinedLiteral
LambdaExpr
ObjCMessageExpr
MSDependentExistsStmt
#+end_example

of these lets get rid of the following
#+begin_example
NoStmt
DefaultStmt
AtomicExpr
IntegerLiteral
FloatingLiteral
ImaginaryLiteral
StringLiteral
CharacterLiteral
CXXBoolLiteralExpr
CXXNullPtrLiteralExpr
ObjCStringLiteral
ObjCBoolLiteralExpr
UserDefinedLiteral
#+end_example

*** TODO Remove redundant statements
Too often we'll have three or more labels with exactly the same source
range.  Maybe the solution could be as simple as collecting ranges
into a container and then removing all duplicates.

*** Different types of AST nodes
(from [[file:/usr/local/src/llvm/tools/clang/tools/libclang/RecursiveASTVisitor.h::bool%20TraverseStmt(Stmt%20*S)%3B][file:/usr/local/src/llvm/tools/clang/tools/libclang/RecursiveASTVisitor.h::bool TraverseStmt(Stmt *S);]])
- Stmt
- QualType
- TypeLoc
- Decl
- NestedNameSpecifier
- NestedNameSpecifierLoc
- Template
- TemplateArgument
- TemplateArgumentLoc
- CXXCtorInitializer
- Capture

** TODO nesting of numbered statements
Ensure that the numbers are applied from the outside-in rather than
the inside out, e.g., in the following =/* 1[ */= should be before
both =/* 2[ */= and =/* 3[ */=.

: /* numbered using clang-mutate */
: int main(int argc, char *argv[])
: /* 0[ */{
:   /* 3[ *//* 2[ *//* 1[ */puts/* ]2 *//* ]3 */(/* 5[ *//* 4[ */"hello"/* ]4 *//* ]5 */)/* ]1 */;
:   /* 6[ */return /* 7[ */0/* ]6 *//* ]7 */;
: }/* ]0 */

** known working versions of LLVM and Clang
LLVM
: Path: .
: Working Copy Root Path: /usr/local/src/llvm
: URL: http://llvm.org/svn/llvm-project/llvm/trunk
: Repository Root: http://llvm.org/svn/llvm-project
: Repository UUID: 91177308-0d34-0410-b5e6-96231b3b80d8
: Revision: 163018
: Node Kind: directory
: Schedule: normal
: Last Changed Author: hliao
: Last Changed Rev: 163018
: Last Changed Date: 2012-08-31 14:12:31 -0600 (Fri, 31 Aug 2012)

Clang
: Path: .
: Working Copy Root Path: /usr/local/src/llvm/tools/clang
: URL: http://llvm.org/svn/llvm-project/cfe/trunk
: Repository Root: http://llvm.org/svn/llvm-project
: Repository UUID: 91177308-0d34-0410-b5e6-96231b3b80d8
: Revision: 163034
: Node Kind: directory
: Schedule: normal
: Last Changed Author: lattner
: Last Changed Rev: 163034
: Last Changed Date: 2012-08-31 16:39:21 -0600 (Fri, 31 Aug 2012)

Using the latest version of Clang on Arch Linux I get [[http://donttreadonme.co.uk/rubinius/2012/10/02.html][this error]],
which is fixed by [[http://sourceware.org/git/?p=glibc.git;a=blobdiff;f=misc/sys/cdefs.h;h=fb6c959d903474b38fd0fcc36e17c5290dcd867c;hp=b94147efe8c5bbba718cb2f9d5911a92414864b6;hb=b7bfe116;hpb=43c4edba7ee8224134132fb38df5f63895cbb326][this commit]] to glibc which unfortunately is not yet
in Arch.

*** after rebuilding clang getting the following
: clang++ -I/usr/include -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -fno-tree-pre -fno-tree-pre  -fPIC -fvisibility-inlines-hidden -O3 -DNDEBUG  -D_GNU_SOURCE -Wall -W -Wno-unused-parameter -Wwrite-strings -pedantic -Wno-long-long -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-rtti   -c -o clang-mutate.o clang-mutate.cpp
: clang-3: warning: argument unused during compilation: '-fno-tree-pre'
: clang-3: warning: argument unused during compilation: '-fno-tree-pre'
: In file included from clang-mutate.cpp:15:
: In file included from ./ASTMutate.h:7:
: In file included from /usr/include/clang/AST/ASTContext.h:18:
: In file included from /usr/include/clang/Basic/IdentifierTable.h:22:
: In file included from /usr/include/llvm/ADT/StringMap.h:17:
: In file included from /usr/include/llvm/ADT/StringRef.h:15:
: In file included from /usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.2/../../../../include/c++/4.7.2/algorithm:62:
: In file included from /usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.2/../../../../include/c++/4.7.2/bits/stl_algo.h:61:
: In file included from /usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.2/../../../../include/c++/4.7.2/cstdlib:65:
: In file included from /usr/include/stdlib.h:957:
: /usr/include/bits/stdlib.h:36:1: error: unknown type name '__extern_always_inline'
: __fortify_function __wur char *
: ^
: /usr/include/sys/cdefs.h:143:28: note: expanded from macro '__fortify_function'
: #define __fortify_function __extern_always_inline __attribute_artificial__

*** patch to PKGBUILD
I made this change to allow building with more recent versions of gcc, any reason not to apply it?
http://sprunge.us/ZeAf

** DONE member access into incomplete type
: $ make mutate-tool
: clang++ -I/usr/local/include  -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -g -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -fPIC -Woverloaded-virtual -Wcast-qual -fno-rtti   -c -o mutate-tool.o mutate-tool.cpp
: mutate-tool.cpp:176:33: error: member access into incomplete type
:       'clang::ASTContext'
:     Visitor.TraverseDecl(Context.getTranslationUnitDecl());
:                                 ^
: /usr/local/include/clang/Basic/Builtins.h:29:9: note: forward
:       declaration of 'clang::ASTContext'
:   class ASTContext;
:         ^
: 1 error generated.
: make: *** [mutate-tool.o] Error 1

http://permalink.gmane.org/gmane.comp.debugging.lldb.devel/982

Suggests stepping back to these versions
|       | git                                      |    svn |
|-------+------------------------------------------+--------|
| llvm  | 61dfa77fce2b6b6261e43334aec060129eac5c6c | 152264 |
| clang | 9ea396a886d46a9329817ad0a8c423510634d889 | 132239 |

** DONE linking problem -- undefined reference to `llvm::createMCAsmParser
*** these work in clang/tools
compiling
: if  clang++ -I/usr/local/src/llvm/include -I/usr/local/src/llvm/tools/clang/tools/clang-check  -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/usr/local/src/llvm/tools/clang/tools/clang-check/../../include -I/usr/local/src/llvm/tools/clang/tools/clang-check/../../include -g -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -fPIC -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing    -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings  -Wcovered-switch-default -c -MMD -MP -MF "/usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.d.tmp" -MT "/usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.o" -MT "/usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.d" ClangCheck.cpp -o /usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.o ; \
:         then /bin/mv -f "/usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.d.tmp" "/usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.d"; else /bin/rm "/usr/local/src/llvm/tools/clang/tools/clang-check/Debug+Asserts/ClangCheck.d.tmp"; exit 1; fi
linking
: clang++ -I/usr/local/src/llvm/include -I/usr/local/src/llvm/tools/clang/tools/clang-check  -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/usr/local/src/llvm/tools/clang/tools/clang-check/../../include -I/usr/local/src/llvm/tools/clang/tools/clang-check/../../include -g -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -fPIC -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing  -g -Wl,-R -Wl,'$ORIGIN/../lib' -Wl,-R -Wl,/usr/local/src/llvm/Debug+Asserts/bin  -L/usr/local/src/llvm/Debug+Asserts/lib -L/usr/local/src/llvm/Debug+Asserts/lib -Wl,--version-script=/usr/local/src/llvm/autoconf/ExportMap.map     -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings  -Wcovered-switch-default  -o mutate-tool mutate-tool.o -lclangFrontend -lclangSerialization -lclangDriver -lclangTooling -lclangParse -lclangSema -lclangAnalysis -lclangEdit -lclangAST -lclangLex -lclangBasic -lLLVM-3.2svn   -lpthread -ldl -lm

replacing clang-check with mutation-tool in the above works

*** finding other references to MCAsmParser
: rgrep createMCAsmParser *
: lib/Sema/SemaStmtAsm.cpp:      Parser(createMCAsmParser(SrcMgr, Ctx, *Str.get(), *MAI));
: lib/Sema/SemaStmtAsm.cpp:      TargetParser(TheTarget->createMCAsmParser(*STI, *Parser));
: tools/driver/cc1as_main.cpp:  OwningPtr<MCAsmParser> Parser(createMCAsmParser(SrcMgr, Ctx,
: tools/driver/cc1as_main.cpp:  OwningPtr<MCTargetAsmParser> TAP(TheTarget->createMCAsmParser(*STI, *Parser));

** DONE delete semicolons
Could check if next token is semicolon and remove it depending on the
context.  Alternately maybe clang has a transform which removed
superfluous semicolons.

Probably want to break the range up into Beg and End, then move the
End.  Look in earlier versions of the code for comments in DeleteStmt
and possibly a partial implementation.
